import gleam/should
import gleam_synapses/activation_function
import gleam_synapses/neural_network.{NeuralNetwork}

fn layers() -> List(Int) {
  [4, 6, 5, 3]
}

fn my_neural_network() -> NeuralNetwork {
  neural_network.init_with_seed(1000, layers())
}

const my_neural_network_json = "[[{\"activationF\":\"sigmoid\",\"weights\":[9.75911920294714185786e-01,6.08726848593679648047e-01,-1.04494638667423922485e-01,8.62155393158315463964e-01,5.08145836217687829617e-01]},{\"activationF\":\"sigmoid\",\"weights\":[4.28843110712606057078e-01,-9.28013620271803230111e-01,-8.41588171984059663089e-01,6.36984498178201574703e-01,4.93257044371126829319e-01]},{\"activationF\":\"sigmoid\",\"weights\":[-2.50953134676056510699e-01,4.86245119456245822320e-01,3.73046333986740252797e-01,4.81245150690884138101e-01,4.37726902073087398293e-01]},{\"activationF\":\"sigmoid\",\"weights\":[3.40628891285645440945e-01,-7.56548557683769384852e-02,1.23367234244295520540e-01,-5.90345384807812179062e-01,-2.57386677629991567073e-02]},{\"activationF\":\"sigmoid\",\"weights\":[9.76627159811624956376e-02,1.02552052937866067239e-01,7.63052863780054657639e-01,8.64186513158113456257e-01,8.52234019355143201935e-01]},{\"activationF\":\"sigmoid\",\"weights\":[5.00883936382927830167e-01,-8.15786202686251682437e-01,-6.97863190958658563545e-02,5.25424887494758685591e-02,-4.21872839622160933359e-01]}],[{\"activationF\":\"sigmoid\",\"weights\":[-5.45387987433667786874e-01,1.93848784045706823420e-01,-8.94539921764575529650e-01,1.76588131414325832935e-02,-9.95575449989962280029e-01,7.89557579471902748480e-01,-1.35504802947656655121e-01]},{\"activationF\":\"sigmoid\",\"weights\":[7.44954448711644845460e-01,8.20276742068607456204e-01,-1.00644851204899854480e-01,-4.33682731359977813312e-01,-4.58571748080177199469e-01,-1.85858973827872642204e-01,7.33967714897619138981e-01]},{\"activationF\":\"sigmoid\",\"weights\":[-6.95678943892840573326e-01,8.46762603452720030717e-01,7.55033002416591436656e-01,-1.47621102357376132730e-01,9.45956963950357776483e-01,2.42011207645256742893e-01,9.36843480454867538754e-02]},{\"activationF\":\"sigmoid\",\"weights\":[1.68764427078723855402e-01,-2.16468406120710055163e-01,-2.53367398962561107822e-01,4.16066890622018403789e-01,2.53236711781927859022e-02,5.17898431689628901964e-01,1.60560495194321806167e-01]},{\"activationF\":\"sigmoid\",\"weights\":[-2.95402891098786479773e-01,2.34971109993689974971e-01,1.75273896680819163407e-01,-6.16672251978913177339e-01,7.59511997533433236285e-01,6.19803202444554113271e-01,1.83035240691822975734e-01]}],[{\"activationF\":\"sigmoid\",\"weights\":[8.82362387086611965614e-01,-3.71599210719792072410e-01,-2.45399966611133502070e-01,3.07671322819684789351e-02,6.56814133282412671022e-01,-2.75586893003708643946e-01]},{\"activationF\":\"sigmoid\",\"weights\":[6.33570585076983050499e-01,-4.81981591043407764374e-02,-4.93232487696873889149e-01,-6.84966179534859387346e-01,-3.57854336273865092366e-01,9.18464864900381039448e-01]},{\"activationF\":\"sigmoid\",\"weights\":[5.93111751544443954742e-01,-6.65279436338539476026e-03,8.67715902167896180330e-01,-9.34252979757118851012e-01,6.57668916181701312951e-01,1.55667717396031024535e-01]}]]"

fn input_values() -> List(Float) {
  [1.0, 0.5625, 0.511111, 0.47619]
}

fn prediction() -> List(Float) {
  neural_network.prediction(my_neural_network(), input_values())
}

const learning_rate = 0.99

fn expected_output() -> List(Float) {
  [0.2, 0.8, 0.01]
}

fn my_fit_network() -> NeuralNetwork {
  neural_network.fit(
    my_neural_network(),
    learning_rate,
    input_values(),
    expected_output(),
  )
}

pub fn neural_network_to_json_test() {
  my_neural_network()
  |> neural_network.to_json
  |> should.equal(my_neural_network_json)
}

pub fn neural_network_prediction_test() {
  prediction()
  |> should.equal([0.7018483008852783, 0.5232699523175631, 0.746950953587391])
}

pub fn neural_network_normal_errors_test() {
  neural_network.errors(
    my_neural_network(),
    learning_rate,
    input_values(),
    expected_output(),
  )
  |> should.equal([
    0.07624623311148832, 0.042888506125212174, 0.0389702884518459, 0.036307693745359616,
  ])
}

pub fn neural_network_zero_errors_test() {
  neural_network.errors(
    my_neural_network(),
    learning_rate,
    input_values(),
    prediction(),
  )
  |> should.equal([0.0, 0.0, 0.0, 0.0])
}

pub fn fit_neural_network_prediction_test() {
  neural_network.prediction(my_fit_network(), input_values())
  |> should.equal([0.6335205999385805, 0.5756314596704061, 0.6599122411687741])
}
